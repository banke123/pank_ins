---
description: 
globs: 
alwaysApply: true
---
一、这是一个Python项目，主要功能是使用AI来控制示波器。然后还会有一些插件如时序图功能。
1.1、我们这个主要的技术选型如下：
    AI 大模型：这个调用这块我们已经弄好的，到时我们自己导入进来就行了用的是langchain框架
    UI 界面：建议使用PYQT6
    多线程和消息交互：用的是pykka
    时序图功能：这个已经有了，后面导入即可
    示波器控制：这部分驱动已经有了，还有程序。后面直接导入即可。
    logger：用python原生的即可

1.2、我们这个整体的概念是模块化，每个功能都是一个actor。注意文件也都是要模块化且符合我们python_rule

二、项目要求

### 代码质量原则
- 遵循 SOLID 设计原则
- 避免代码重复（DRY原则）
- 保持代码简洁、清晰、易读
- 考虑代码的可维护性和可扩展性

### 异常处理
- 合理使用异常处理机制
- 提供清晰的错误信息
- 记录必要的错误日志
- 优雅处理边界情况

三、 文档规范
### 代码注释
```
/**
 * 函数功能说明
 * 
 * @param {参数类型} 参数名 - 参数说明
 * @returns {返回类型} 返回值说明
 */
```
### 项目文档
- 及时更新 README 和技术文档，针对readme 文档，主要分两种，一种是整个项目的，这个主要说明了整个项目的用法，和作用等，另一种主要是每个模块的，这个是每个模块的用法和作用。每次更新代码都需要看下相应的readme是否需要调整还有依赖库
- 使用中文编写文档
- 包含必要的安装和使用说明
- 记录重要的架构决策
- 注意整个文件夹的架构是清晰的，有框架的。不要测试文件，log文件之类的乱放

### 依赖库
- 整个项目只有纯在一个依赖库，且需要及时更新


四、调试

我们调试时尽量都把log控制台和文件，分析问题的时候需要查看控制台的log。

五、版本控制规范
### 基础配置
- 使用 Git 作为版本控制系统
- 设置合适的 .gitignore 文件
- 保护主分支，实施分支权限控制

六、测试规范
### 测试原则
- 遵循测试金字塔原则
- 保持测试代码的整洁和可维护性
- 避免测试代码重复
- 关注测试覆盖率

七、测试类型
- 单元测试：测试独立功能单元
- 集成测试：测试模块间交互
- 端到端测试：测试完整业务流程
- 性能测试：关键功能性能验证



