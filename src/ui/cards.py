"""
Âç°ÁâáÁªÑ‰ª∂Ê®°Âùó

Êèê‰æõ‰∏çÂêåÁ±ªÂûãÁöÑÊµÅÁ®ãÂç°ÁâáÁªÑ‰ª∂ÔºåÂåÖÊã¨‰ªªÂä°Âç°ÁâáÂíåËÆ°ÂàíÂç°Áâá
ÊîØÊåÅÁæéËßÇÁöÑÁïåÈù¢ËÆæËÆ°Âíå‰∫§‰∫íÂäüËÉΩ
"""

from PySide6.QtWidgets import (
    QFrame, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QWidget, QProgressBar, QSizePolicy
)
from PySide6.QtCore import Qt, Signal, QPropertyAnimation, QEasingCurve, QRect
from PySide6.QtGui import QFont, QPainter, QPainterPath, QColor, QLinearGradient


class BaseCard(QFrame):
    """
    Âü∫Á°ÄÂç°ÁâáÁ±ª
    
    Êèê‰æõÈÄöÁî®ÁöÑÂç°ÁâáÂ§ñËßÇÂíåÂä®ÁîªÊïàÊûú
    """
    
    card_clicked = Signal(dict)
    
    def __init__(self, data):
        super().__init__()
        self.data = data
        self.is_hovered = False
        self.setup_base_style()
        
    def setup_base_style(self):
        """ËÆæÁΩÆÂü∫Á°ÄÊ†∑Âºè"""
        self.setCursor(Qt.PointingHandCursor)
        self.setStyleSheet("""
            BaseCard {
                background-color: white;
                border-radius: 16px;
                border: 2px solid #e2e8f0;
            }
        """)
        
    def update_display(self):
        """
        Êõ¥Êñ∞ÊòæÁ§∫ÂÜÖÂÆπÁöÑÂü∫Á°ÄÊñπÊ≥ï
        Â≠êÁ±ªÂ∫îËØ•ÈáçÂÜôÊ≠§ÊñπÊ≥ïÊù•ÂÆûÁé∞ÂÖ∑‰ΩìÁöÑÊõ¥Êñ∞ÈÄªËæë
        """
        pass
        
    def enterEvent(self, event):
        """Èº†Ê†áËøõÂÖ•‰∫ã‰ª∂"""
        self.is_hovered = True
        # Á¶ÅÁî®ÊÇ¨ÂÅúÂä®ÁîªÊïàÊûúÔºåÂè™Â±ïÂºÄ‰∏çÊîæÂ§ß
        super().enterEvent(event)
        
    def leaveEvent(self, event):
        """Èº†Ê†áÁ¶ªÂºÄ‰∫ã‰ª∂"""
        self.is_hovered = False
        # Á¶ÅÁî®ÊÇ¨ÂÅúÂä®ÁîªÊïàÊûúÔºåÂè™Â±ïÂºÄ‰∏çÊîæÂ§ß
        super().leaveEvent(event)
        
    def mousePressEvent(self, event):
        """Â§ÑÁêÜÁÇπÂáª‰∫ã‰ª∂"""
        if event.button() == Qt.LeftButton:
            self.card_clicked.emit(self.data)
        super().mousePressEvent(event)


class TaskCard(BaseCard):
    """
    ‰ªªÂä°Âç°Áâá - ‰ø°Âè∑ÊµãËØïÊµÅÁ®ãÂç°Áâá
    
    ÊòæÁ§∫Âú®Â∑•‰ΩúÂå∫ÔºåÂ±ïÁ§∫ÂÖ∑‰ΩìÁöÑ‰ø°Âè∑ÊµãËØïÊ≠•È™§ÂíåËøõÂ∫¶
    """
    
    step_clicked = Signal(dict, int)
    
    def __init__(self, task_data):
        super().__init__(task_data)
        self.task_data = task_data
        self.setup_ui()
        
    def update_display(self):
        """
        Êõ¥Êñ∞‰ªªÂä°Âç°ÁâáÊòæÁ§∫ÂÜÖÂÆπ
        """
        # Êõ¥Êñ∞Êï∞ÊçÆÂºïÁî®
        self.data = self.task_data
        
        # ÈáçÊñ∞ËÆæÁΩÆÊ†∑ÂºèÂíå‰∏ªÈ¢òËâ≤
        status = self.task_data.get('status', 'running')
        self.theme_colors = self.get_theme_colors(status)
        
        # ÈáçÊñ∞ÂàõÂª∫ÁïåÈù¢
        self.setup_ui()
        
    def setup_ui(self):
        """ËÆæÁΩÆ‰ªªÂä°Âç°ÁâáÁïåÈù¢"""
        # ÁßªÈô§Âõ∫ÂÆöÈ´òÂ∫¶ÔºåËÆ©Âç°ÁâáËá™ÈÄÇÂ∫îÂÜÖÂÆπ
        # self.setFixedHeight(220)
        self.setMinimumHeight(220)  # ËÆæÁΩÆÊúÄÂ∞èÈ´òÂ∫¶
        
        # Ê†πÊçÆÁä∂ÊÄÅËÆæÁΩÆ‰∏ªÈ¢òËâ≤
        status = self.task_data.get('status', 'running')
        self.theme_colors = self.get_theme_colors(status)
        
        self.setStyleSheet(f"""
            TaskCard {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 white, stop:1 {self.theme_colors['bg_gradient']});
                border: 2px solid {self.theme_colors['border']};
                border-left: 6px solid {self.theme_colors['accent']};
                border-radius: 16px;
                margin: 12px 8px;
            }}
            TaskCard:hover {{
                border-color: {self.theme_colors['accent']};
            }}
        """)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(28, 24, 28, 24)  # Ëøõ‰∏ÄÊ≠•Â¢ûÂä†ËæπË∑ù
        layout.setSpacing(18)  # Â¢ûÂä†Èó¥Ë∑ù
        
        # ÂàõÂª∫ÂêÑ‰∏™Âå∫Âüü
        self.create_header(layout)
        self.create_signal_info(layout)
        self.create_progress_section(layout)
        self.create_current_step(layout)
        self.create_action_buttons(layout)
        
        self.setLayout(layout)
        
    def get_theme_colors(self, status):
        """Ê†πÊçÆÁä∂ÊÄÅËé∑Âèñ‰∏ªÈ¢òËâ≤"""
        color_schemes = {
            'running': {
                'accent': '#3b82f6',
                'border': '#dbeafe',
                'bg_gradient': '#f0f9ff',
                'text': '#1e40af'
            },
            'completed': {
                'accent': '#10b981',
                'border': '#d1fae5',
                'bg_gradient': '#f0fdf4',
                'text': '#059669'
            },
            'error': {
                'accent': '#ef4444',
                'border': '#fecaca',
                'bg_gradient': '#fef2f2',
                'text': '#dc2626'
            },
            'paused': {
                'accent': '#f59e0b',
                'border': '#fed7aa',
                'bg_gradient': '#fffbeb',
                'text': '#d97706'
            }
        }
        return color_schemes.get(status, color_schemes['running'])
        
    def create_header(self, parent_layout):
        """ÂàõÂª∫Â§¥ÈÉ®Âå∫Âüü"""
        header_layout = QHBoxLayout()
        header_layout.setSpacing(16)  # Â¢ûÂä†Â§¥ÈÉ®ÂÖÉÁ¥†Èó¥Ë∑ù
        
        # ‰ø°Âè∑Á±ªÂûãÂõæÊ†áÂíåÊ†áÈ¢ò
        icon_widget = QLabel()
        icon_widget.setFixedSize(48, 48)
        signal_type = self.task_data.get('signal_type', 'Êú™Áü•')
        icon_widget.setText(self.get_signal_icon(signal_type))
        icon_widget.setAlignment(Qt.AlignCenter)
        icon_widget.setStyleSheet(f"""
            QLabel {{
                background-color: {self.theme_colors['accent']};
                color: white;
                border-radius: 24px;
                font-size: 20px;
                font-weight: bold;
            }}
        """)
        
        # Ê†áÈ¢òÂå∫Âüü
        title_layout = QVBoxLayout()
        title_layout.setSpacing(4)
        
        title = QLabel(f"{signal_type} ‰ø°Âè∑ÊµãËØï")
        title.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 13, QFont.Bold))
        title.setStyleSheet(f"color: {self.theme_colors['text']};")
        
        subtitle = QLabel(f"ËÆ°Âàí #{self.task_data.get('plan_num', 0)}")
        subtitle.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 10))
        subtitle.setStyleSheet("color: #6b7280;")
        
        title_layout.addWidget(title)
        title_layout.addWidget(subtitle)
        
        # Áä∂ÊÄÅÊ†áÁ≠æ
        status_label = self.create_status_badge()
        
        header_layout.addWidget(icon_widget)
        header_layout.addLayout(title_layout)
        header_layout.addStretch()
        header_layout.addWidget(status_label)
        
        parent_layout.addLayout(header_layout)
        
    def get_signal_icon(self, signal_type):
        """Ëé∑Âèñ‰ø°Âè∑Á±ªÂûãÂõæÊ†á"""
        icons = {
            'I2C': 'üîß', 'SPI': '‚ö°', 'UART': 'üì°',
            'PWM': '„Ä∞Ô∏è', 'CLOCK': '‚è∞', 'VIO': 'üîã'
        }
        return icons.get(signal_type, 'üìä')
        
    def create_status_badge(self):
        """ÂàõÂª∫Áä∂ÊÄÅÂæΩÁ´†"""
        status = self.task_data.get('status', 'running')
        status_text = {'running': 'ÊâßË°å‰∏≠', 'completed': 'Â∑≤ÂÆåÊàê', 
                      'error': 'ÈîôËØØ', 'paused': 'ÊöÇÂÅú'}.get(status, 'Êú™Áü•')
        
        badge = QLabel(f"‚óè {status_text}")
        badge.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 9, QFont.Bold))
        badge.setAlignment(Qt.AlignCenter)
        badge.setFixedSize(80, 28)
        badge.setStyleSheet(f"""
            QLabel {{
                background-color: {self.theme_colors['accent']};
                color: white;
                border-radius: 14px;
                padding: 4px 12px;
            }}
        """)
        
        return badge
        
    def create_signal_info(self, parent_layout):
        """ÂàõÂª∫‰ø°Âè∑‰ø°ÊÅØÂå∫Âüü"""
        info_layout = QHBoxLayout()
        info_layout.setSpacing(20)  # Â¢ûÂä†‰ø°ÊÅØÈ°πÈó¥Ë∑ù
        
        # Ê≠•È™§‰ø°ÊÅØ
        steps = self.task_data.get('steps', [])
        total_steps = len(steps)
        current_step = self.task_data.get('current_step', 0)
        
        steps_info = QLabel(f"üìã {total_steps} ‰∏™Ê≠•È™§")
        steps_info.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 10))
        steps_info.setStyleSheet("color: #4b5563;")
        
        # ËøõÂ∫¶‰ø°ÊÅØ
        progress_info = QLabel(f"üéØ {current_step}/{total_steps}")
        progress_info.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 10))
        progress_info.setStyleSheet("color: #4b5563;")
        
        info_layout.addWidget(steps_info)
        info_layout.addWidget(progress_info)
        info_layout.addStretch()
        
        parent_layout.addLayout(info_layout)
        
    def create_progress_section(self, parent_layout):
        """ÂàõÂª∫ËøõÂ∫¶Âå∫Âüü"""
        progress_layout = QVBoxLayout()
        progress_layout.setSpacing(10)  # Â¢ûÂä†ËøõÂ∫¶Âå∫ÂüüÂÜÖÈÉ®Èó¥Ë∑ù
        
        # ËøõÂ∫¶Êù°
        progress_bar = QProgressBar()
        current_step = self.task_data.get('current_step', 0)
        total_steps = len(self.task_data.get('steps', []))
        
        if total_steps > 0:
            progress_value = int((current_step / total_steps) * 100)
        else:
            progress_value = 0
            
        progress_bar.setValue(progress_value)
        progress_bar.setFixedHeight(8)
        progress_bar.setStyleSheet(f"""
            QProgressBar {{
                border: none;
                background-color: #f3f4f6;
                border-radius: 4px;
            }}
            QProgressBar::chunk {{
                background-color: {self.theme_colors['accent']};
                border-radius: 4px;
            }}
        """)
        
        # Ê≠•È™§ÁÇπ
        dots_layout = QHBoxLayout()
        dots_layout.setSpacing(6)
        
        for i in range(total_steps):
            dot = QLabel("‚óè")
            if i < current_step:
                dot.setStyleSheet("color: #10b981; font-size: 12px;")  # Â∑≤ÂÆåÊàê
            elif i == current_step:
                dot.setStyleSheet(f"color: {self.theme_colors['accent']}; font-size: 16px;")  # ÂΩìÂâç
            else:
                dot.setStyleSheet("color: #e5e7eb; font-size: 12px;")  # Êú™ÂºÄÂßã
            dots_layout.addWidget(dot)
            
        dots_layout.addStretch()
        
        progress_layout.addWidget(progress_bar)
        progress_layout.addLayout(dots_layout)
        
        parent_layout.addLayout(progress_layout)
        
    def create_current_step(self, parent_layout):
        """ÂàõÂª∫ÂΩìÂâçÊ≠•È™§Âå∫Âüü"""
        steps = self.task_data.get('steps', [])
        current_step = self.task_data.get('current_step', 0)
        
        if steps and current_step < len(steps):
            step_data = steps[current_step]
            step_type = step_data.get('type', '')
            step_content = step_data.get('content', '')
            
            step_layout = QHBoxLayout()
            step_layout.setContentsMargins(16, 12, 16, 12)  # Â¢ûÂä†Ê≠•È™§ÂÜÖËæπË∑ù
            step_layout.setSpacing(16)  # Â¢ûÂä†Ê≠•È™§ÂÜÖÈÉ®Èó¥Ë∑ù
            
            # Ê≠•È™§Á±ªÂûãÂõæÊ†á
            type_icon = {'instruction': '‚ö°', 'HCI': 'üë§', 
                        'measurement': 'üìä', 'analysis': 'üîç'}.get(step_type, 'üìã')
            
            icon_label = QLabel(type_icon)
            icon_label.setFixedSize(32, 32)
            icon_label.setAlignment(Qt.AlignCenter)
            icon_label.setStyleSheet(f"""
                QLabel {{
                    background-color: {self.theme_colors['bg_gradient']};
                    border: 2px solid {self.theme_colors['accent']};
                    border-radius: 16px;
                    font-size: 14px;
                }}
            """)
            
            # Ê≠•È™§ÂÜÖÂÆπ
            content_label = QLabel(step_content[:60] + "..." if len(step_content) > 60 else step_content)
            content_label.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 10))
            content_label.setStyleSheet("color: #374151;")
            content_label.setWordWrap(True)
            
            step_layout.addWidget(icon_label)
            step_layout.addWidget(content_label)
            step_layout.addStretch()
            
            parent_layout.addLayout(step_layout)
            
    def create_action_buttons(self, parent_layout):
        """ÂàõÂª∫Êìç‰ΩúÊåâÈíÆÂå∫Âüü"""
        button_layout = QHBoxLayout()
        button_layout.setSpacing(12)
        
        # ËØ¶ÊÉÖÊåâÈíÆ
        detail_btn = QPushButton("üìã Êü•ÁúãËØ¶ÊÉÖ")
        detail_btn.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 9))
        detail_btn.setFixedHeight(32)
        detail_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.theme_colors['accent']};
                color: white;
                border: none;
                border-radius: 16px;
                padding: 6px 16px;
            }}
            QPushButton:hover {{
                background-color: {self.theme_colors['text']};
            }}
        """)
        
        # ÊéßÂà∂ÊåâÈíÆ
        status = self.task_data.get('status', 'running')
        if status == 'running':
            control_btn = QPushButton("‚è∏Ô∏è ÊöÇÂÅú")
        elif status == 'paused':
            control_btn = QPushButton("‚ñ∂Ô∏è ÁªßÁª≠")
        elif status == 'completed':
            control_btn = QPushButton("üîÑ ÈáçÊñ∞ÊâßË°å")
        else:
            control_btn = QPushButton("‚ñ∂Ô∏è ÂºÄÂßã")
            
        control_btn.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 9))
        control_btn.setFixedHeight(32)
        control_btn.setStyleSheet("""
            QPushButton {
                background-color: #f3f4f6;
                color: #374151;
                border: 1px solid #d1d5db;
                border-radius: 16px;
                padding: 6px 16px;
            }
            QPushButton:hover {
                background-color: #e5e7eb;
            }
        """)
        
        button_layout.addStretch()
        button_layout.addWidget(detail_btn)
        button_layout.addWidget(control_btn)
        
        parent_layout.addLayout(button_layout)


class PlanCard(BaseCard):
    """
    ËÆ°ÂàíÂç°Áâá - ÊµãËØïËÆ°ÂàíÊµÅÁ®ãÂç°Áâá
    
    ÊòæÁ§∫Âú®Â∑¶‰æßËæπÊ†èÔºåÊîØÊåÅÂ±ïÂºÄÊòæÁ§∫‰ªªÂä°ÂÜÖÂÆπ
    """
    
    task_selected = Signal(dict, int)
    
    def __init__(self, plan_data):
        super().__init__(plan_data)
        self.plan_data = plan_data
        self.project_data = plan_data  # Ê∑ªÂä†project_dataÂà´Âêç‰øùÊåÅÂÖºÂÆπÊÄß
        self.is_expanded = False  # ÊòØÂê¶Â±ïÂºÄÁä∂ÊÄÅ
        self.task_widgets = []     # Â≠òÂÇ®‰ªªÂä°Ê≠•È™§ÁªÑ‰ª∂
        self.setup_ui()
        
    def update_display(self):
        """
        Êõ¥Êñ∞ËÆ°ÂàíÂç°ÁâáÊòæÁ§∫ÂÜÖÂÆπ
        ÂΩìÈ°πÁõÆÊï∞ÊçÆÂèëÁîüÂèòÂåñÊó∂Ë∞ÉÁî®Ê≠§ÊñπÊ≥ïÊù•Âà∑Êñ∞ÁïåÈù¢
        """
        # Ê≥®ÊÑèÔºöËøôÈáåÁöÑself.project_dataÊòØ‰ªéÂ§ñÈÉ®‰º†ÂÖ•ÁöÑÊõ¥Êñ∞ÂêéÁöÑÊï∞ÊçÆ
        # Êõ¥Êñ∞ÂÜÖÈÉ®Êï∞ÊçÆÂºïÁî®
        self.plan_data = self.project_data
        self.data = self.project_data
        
        # Ê∏ÖÈô§ÂΩìÂâçÁïåÈù¢
        if hasattr(self, 'main_layout') and self.main_layout:
            while self.main_layout.count():
                child = self.main_layout.takeAt(0)
                if child.widget():
                    child.widget().deleteLater()
        
        # Ê∏ÖÈô§‰ªªÂä°ÁªÑ‰ª∂
        self.clear_task_widgets()
        
        # ÈáçÊñ∞ËÆæÁΩÆÊ†∑ÂºèÂíå‰∏ªÈ¢òËâ≤
        status = self.plan_data.get('status', 'planning')
        self.theme_colors = self.get_theme_colors(status)
        
        # ÈáçÊñ∞ÂàõÂª∫ÁïåÈù¢
        self.setup_ui()
        
        print(f"Âç°ÁâáÁïåÈù¢Â∑≤Êõ¥Êñ∞: {self.plan_data.get('project_name', 'Êú™Áü•')}")
        
    def clear_task_widgets(self):
        """
        Ê∏ÖÈô§‰ªªÂä°Ê≠•È™§ÁªÑ‰ª∂
        """
        for widget in self.task_widgets:
            widget.setParent(None)
            widget.deleteLater()
        self.task_widgets.clear()
        
    def setup_ui(self):
        """ËÆæÁΩÆËÆ°ÂàíÂç°ÁâáÁïåÈù¢"""
        # ËÆæÁΩÆÂç°ÁâáÊúÄÂ§ßÂÆΩÂ∫¶ÔºåÈò≤Ê≠¢Ë¢´ÂÜÖÂÆπÊíëÂºÄ
        self.setMaximumWidth(330)  # Á®çÂ∞è‰∫é‰æßËæπÊ†èÂÆΩÂ∫¶360
        
        # Ê†πÊçÆÁä∂ÊÄÅËÆæÁΩÆ‰∏ªÈ¢òËâ≤
        status = self.plan_data.get('status', 'planning')
        self.theme_colors = self.get_theme_colors(status)
        
        self.setStyleSheet(f"""
            PlanCard {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 white, stop:1 {self.theme_colors['bg_gradient']});
                border: 2px solid {self.theme_colors['border']};
                border-left: 5px solid {self.theme_colors['accent']};
                border-radius: 12px;
                margin: 8px 6px;
            }}
            PlanCard:hover {{
                border-color: {self.theme_colors['accent']};
            }}
        """)
        
        # ‰∏ªÂ∏ÉÂ±Ä
        self.main_layout = QVBoxLayout()
        self.main_layout.setContentsMargins(20, 20, 20, 20)  # ÂáèÂ∞ëÂÜÖËæπË∑ù
        self.main_layout.setSpacing(16)  # ÂáèÂ∞ëÂÜÖÈÉ®Èó¥Ë∑ù
        
        # ÂàõÂª∫Âõ∫ÂÆöÊòæÁ§∫ÁöÑÂ§¥ÈÉ®Âå∫Âüü
        self.create_header(self.main_layout)
        self.create_plan_info(self.main_layout)
        self.create_progress_indicator(self.main_layout)
        
        # ÂàõÂª∫ÂèØÂ±ïÂºÄÁöÑ‰ªªÂä°ÂÜÖÂÆπÂå∫ÂüüÔºàÂàùÂßãÈöêËóèÔºâ
        self.create_expandable_content()
        
        self.setLayout(self.main_layout)
        
    def create_expandable_content(self):
        """ÂàõÂª∫ÂèØÂ±ïÂºÄÁöÑ‰ªªÂä°ÂÜÖÂÆπÂå∫Âüü"""
        # ÂàÜÈöîÁ∫ø
        self.separator = QFrame()
        self.separator.setFrameShape(QFrame.HLine)
        self.separator.setFrameShadow(QFrame.Sunken)
        self.separator.setStyleSheet(f"color: {self.theme_colors['border']};")
        self.separator.hide()
        
        # ‰ªªÂä°Ê≠•È™§ÂÆπÂô®
        self.task_container = QWidget()
        self.task_container.setMaximumWidth(290)  # ËÆæÁΩÆÂÆπÂô®ÊúÄÂ§ßÂÆΩÂ∫¶
        self.task_layout = QVBoxLayout()
        self.task_layout.setContentsMargins(0, 8, 0, 0)  # ÂáèÂ∞ëÈ°∂ÈÉ®ËæπË∑ù
        self.task_layout.setSpacing(8)  # ÂáèÂ∞ëÊ≠•È™§Èó¥Ë∑ù
        
        # Ê†áÈ¢ò
        self.task_title = QLabel("üìã ÊµãËØï‰ªªÂä°ËØ¶ÊÉÖ")
        self.task_title.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 10, QFont.Bold))
        self.task_title.setStyleSheet(f"color: {self.theme_colors['text']};")
        self.task_layout.addWidget(self.task_title)
        
        # ÂàõÂª∫‰ªªÂä°Ê≠•È™§ÂàóË°®
        self.create_task_steps()
        
        self.task_container.setLayout(self.task_layout)
        self.task_container.hide()
        
        # Ê∑ªÂä†Âà∞‰∏ªÂ∏ÉÂ±Ä
        self.main_layout.addWidget(self.separator)
        self.main_layout.addWidget(self.task_container)
        self.main_layout.addStretch()
        
    def create_task_steps(self):
        """ÂàõÂª∫‰ªªÂä°Ê≠•È™§ÂàóË°®"""
        tasks = self.plan_data.get('tasks', [])
        current_task = self.plan_data.get('current_task', 0)
        
        for i, task in enumerate(tasks):
            step_widget = self.create_task_step_widget(task, i, i <= current_task)
            self.task_layout.addWidget(step_widget)
            self.task_widgets.append(step_widget)
            
    def create_task_step_widget(self, task_data, step_index, is_active):
        """ÂàõÂª∫Âçï‰∏™‰ªªÂä°Ê≠•È™§ÁªÑ‰ª∂"""
        step_widget = QFrame()
        step_widget.setMinimumHeight(70)  # ÂáèÂ∞ëÊúÄÂ∞èÈ´òÂ∫¶
        step_widget.setMaximumWidth(290)  # ËÆæÁΩÆÊúÄÂ§ßÂÆΩÂ∫¶ÔºåÈò≤Ê≠¢ÊíëÂºÄ
        
        # Ê≠£Á°ÆËÆæÁΩÆQSizePolicy
        step_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
        
        # Ê†πÊçÆÁä∂ÊÄÅËÆæÁΩÆÊ†∑Âºè
        if step_index < self.plan_data.get('current_task', 0):
            # Â∑≤ÂÆåÊàê
            bg_color = "#f0fdf4"
            border_color = "#10b981"
            text_color = "#059669"
            status_text = "Â∑≤ÂÆåÊàê"
            status_icon = "‚úÖ"
        elif step_index == self.plan_data.get('current_task', 0):
            # ËøõË°å‰∏≠
            bg_color = "#f0f9ff"
            border_color = "#3b82f6"
            text_color = "#2563eb"
            status_text = "ËøõË°å‰∏≠"
            status_icon = "üîÑ"
        else:
            # ÂæÖÊâßË°å
            bg_color = "#f9fafb"
            border_color = "#d1d5db"
            text_color = "#6b7280"
            status_text = "ÂæÖÊâßË°å"
            status_icon = "‚è≥"
            
        step_widget.setStyleSheet(f"""
            QFrame {{
                background-color: {bg_color};
                border: 1px solid {border_color};
                border-radius: 8px;
                margin: 2px 0px;
            }}
            QFrame:hover {{
                border-color: {self.theme_colors['accent']};
                background-color: {self.theme_colors['bg_gradient']};
            }}
        """)
        
        layout = QHBoxLayout()
        layout.setContentsMargins(12, 10, 12, 10)  # ÂáèÂ∞ëÊ≠•È™§ÂÜÖËæπË∑ù
        layout.setSpacing(12)  # ÂáèÂ∞ëÊ≠•È™§ÂÜÖÈÉ®Èó¥Ë∑ù
        
        # Ê≠•È™§ÁºñÂè∑
        step_num = QLabel(f"{step_index + 1}")
        step_num.setFixedSize(20, 20)  # ÂáèÂ∞ëÁºñÂè∑Â§ßÂ∞è
        step_num.setAlignment(Qt.AlignCenter)
        step_num.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 9, QFont.Bold))
        step_num.setStyleSheet(f"""
            QLabel {{
                background-color: {border_color};
                color: white;
                border-radius: 10px;
                font-weight: bold;
            }}
        """)
        
        # Ê≠•È™§‰ø°ÊÅØ
        info_layout = QVBoxLayout()
        info_layout.setSpacing(4)  # ÂáèÂ∞ëÊ≠•È™§‰ø°ÊÅØÂÜÖÈÉ®Èó¥Ë∑ù
        
        # ‰ªªÂä°ÂêçÁß∞ - ÈôêÂà∂ÈïøÂ∫¶Âπ∂ÂêØÁî®Êç¢Ë°å
        task_name_text = task_data.get('task_name', f'‰ªªÂä° {step_index + 1}')
        if len(task_name_text) > 25:
            task_name_text = task_name_text[:25] + "..."
        task_name = QLabel(task_name_text)
        task_name.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 9, QFont.Bold))
        task_name.setStyleSheet(f"color: {text_color};")
        task_name.setWordWrap(True)
        task_name.setMaximumWidth(180)  # ÈôêÂà∂ÂêçÁß∞ÂÆΩÂ∫¶
        
        # ‰ªªÂä°ÊèèËø∞ - ÈôêÂà∂ÈïøÂ∫¶Âπ∂ÂêØÁî®Êç¢Ë°å
        desc_text = task_data.get('test_description', '')
        if len(desc_text) > 40:
            desc_text = desc_text[:40] + "..."
        task_desc = QLabel(desc_text)
        task_desc.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 8))
        task_desc.setStyleSheet(f"color: {text_color};")
        task_desc.setWordWrap(True)
        task_desc.setMaximumWidth(180)  # ÈôêÂà∂ÊèèËø∞ÂÆΩÂ∫¶
        
        info_layout.addWidget(task_name)
        info_layout.addWidget(task_desc)
        
        # Áä∂ÊÄÅÂíåÊó∂Èó¥
        status_layout = QVBoxLayout()
        status_layout.setSpacing(2)  # ÂáèÂ∞ëÁä∂ÊÄÅÂå∫ÂüüÈó¥Ë∑ù
        
        # Áä∂ÊÄÅ
        status_label = QLabel(f"{status_icon}")
        status_label.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 8))
        status_label.setStyleSheet(f"color: {text_color};")
        status_label.setAlignment(Qt.AlignCenter)
        
        # È¢ÑËÆ°Êó∂Èó¥ - ÁÆÄÂåñÊòæÁ§∫
        time_text = task_data.get('estimated_time', 'Êú™Áü•')
        # Á°Æ‰øùtime_textÊòØÂ≠óÁ¨¶‰∏≤Á±ªÂûã
        if not isinstance(time_text, str):
            time_text = str(time_text) if time_text is not None else 'Êú™Áü•'
        if len(time_text) > 8:
            time_text = time_text[:8]
        time_label = QLabel(time_text)
        time_label.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 7))
        time_label.setStyleSheet(f"color: {text_color};")
        time_label.setAlignment(Qt.AlignCenter)
        
        status_layout.addWidget(status_label)
        status_layout.addWidget(time_label)
        status_layout.addStretch()
        
        layout.addWidget(step_num)
        layout.addLayout(info_layout, 1)
        layout.addLayout(status_layout)
        
        step_widget.setLayout(layout)
        
        # Ê∑ªÂä†ÁÇπÂáª‰∫ã‰ª∂
        step_widget.mousePressEvent = lambda event, idx=step_index: self.on_step_clicked(idx)
        step_widget.setCursor(Qt.PointingHandCursor)
        
        return step_widget
        
    def on_step_clicked(self, step_index):
        """Â§ÑÁêÜÊ≠•È™§ÁÇπÂáª‰∫ã‰ª∂"""
        print(f"‰ªªÂä° {step_index + 1} Ë¢´ÁÇπÂáª")
        self.task_selected.emit(self.plan_data, step_index)
        
    def toggle_expansion(self):
        """ÂàáÊç¢Â±ïÂºÄ/Êî∂Ëµ∑Áä∂ÊÄÅ"""
        self.is_expanded = not self.is_expanded
        
        if self.is_expanded:
            # Â±ïÂºÄ
            self.separator.show()
            self.task_container.show()
        else:
            # Êî∂Ëµ∑
            self.separator.hide()
            self.task_container.hide()
            
        # Êõ¥Êñ∞Â±ïÂºÄÊåáÁ§∫Âô®
        self.update_expand_indicator()
        
        # Ëß¶ÂèëÂ∏ÉÂ±ÄÊõ¥Êñ∞
        self.updateGeometry()
        if self.parent():
            self.parent().updateGeometry()
        
    def mousePressEvent(self, event):
        """Â§ÑÁêÜÂç°ÁâáÁÇπÂáª‰∫ã‰ª∂"""
        if event.button() == Qt.LeftButton:
            # ÂèëÈÄÅÂç°ÁâáÁÇπÂáª‰ø°Âè∑ÔºåËÆ©Áà∂ÁªÑ‰ª∂Â§ÑÁêÜ
            self.card_clicked.emit(self.plan_data)
            
            # ÁÇπÂáªÂêéÂ±ïÂºÄ/Êî∂Ëµ∑Âç°Áâá
            self.toggle_expansion()
        super().mousePressEvent(event)
        
    def get_theme_colors(self, status):
        """Ê†πÊçÆÁä∂ÊÄÅËé∑Âèñ‰∏ªÈ¢òËâ≤"""
        color_schemes = {
            'planning': {
                'accent': '#8b5cf6',
                'border': '#e9d5ff',
                'bg_gradient': '#faf5ff',
                'text': '#7c3aed'
            },
            'running': {
                'accent': '#3b82f6',
                'border': '#dbeafe',
                'bg_gradient': '#f0f9ff',
                'text': '#2563eb'
            },
            'completed': {
                'accent': '#10b981',
                'border': '#d1fae5',
                'bg_gradient': '#f0fdf4',
                'text': '#059669'
            },
            'error': {
                'accent': '#ef4444',
                'border': '#fecaca',
                'bg_gradient': '#fef2f2',
                'text': '#dc2626'
            }
        }
        return color_schemes.get(status, color_schemes['planning'])
        
    def create_header(self, parent_layout):
        """ÂàõÂª∫Â§¥ÈÉ®Âå∫Âüü"""
        header_layout = QHBoxLayout()
        header_layout.setSpacing(16)  # Â¢ûÂä†Â§¥ÈÉ®ÂÖÉÁ¥†Èó¥Ë∑ù
        
        # Â±ïÂºÄ/Êî∂Ëµ∑ÊåáÁ§∫Âô®
        self.expand_indicator = QLabel("‚ñ∂")
        self.expand_indicator.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 10))
        self.expand_indicator.setFixedSize(16, 16)
        self.expand_indicator.setAlignment(Qt.AlignCenter)
        self.expand_indicator.setStyleSheet(f"color: {self.theme_colors['accent']};")
        
        # ËÆ°ÂàíÂêçÁß∞
        plan_name = QLabel(self.plan_data.get('project_name', 'Êú™ÂëΩÂêçËÆ°Âàí'))
        plan_name.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 12, QFont.Bold))
        plan_name.setStyleSheet(f"color: {self.theme_colors['text']};")
        plan_name.setWordWrap(True)
        
        # Áä∂ÊÄÅÂæΩÁ´†
        status_badge = self.create_status_badge()
        
        header_layout.addWidget(self.expand_indicator)
        header_layout.addWidget(plan_name, 1)
        header_layout.addWidget(status_badge)
        
        parent_layout.addLayout(header_layout)
        
    def create_status_badge(self):
        """ÂàõÂª∫Áä∂ÊÄÅÂæΩÁ´†"""
        status = self.plan_data.get('status', 'planning')
        status_map = {
            'planning': 'üìã ËÆ°Âàí‰∏≠',
            'running': 'üîÑ ËøõË°å‰∏≠', 
            'completed': '‚úÖ Â∑≤ÂÆåÊàê',
            'error': '‚ùå ÈîôËØØ'
        }
        
        badge = QLabel(status_map.get(status, '‚ùì Êú™Áü•'))
        badge.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 9))
        badge.setFixedHeight(24)
        badge.setAlignment(Qt.AlignCenter)
        badge.setStyleSheet(f"""
            QLabel {{
                background-color: {self.theme_colors['accent']};
                color: white;
                border-radius: 12px;
                padding: 4px 12px;
            }}
        """)
        
        return badge
        
    def create_plan_info(self, parent_layout):
        """ÂàõÂª∫ËÆ°Âàí‰ø°ÊÅØÂå∫Âüü"""
        info_layout = QHBoxLayout()
        info_layout.setSpacing(20)  # Â¢ûÂä†‰ø°ÊÅØÈ°πÈó¥Ë∑ù
        
        # ‰ªªÂä°Êï∞Èáè
        total_tasks = self.plan_data.get('total_tasks', 0)
        current_task = self.plan_data.get('current_task', 0)
        
        tasks_info = QLabel(f"üìù {total_tasks} ‰∏™‰ªªÂä°")
        tasks_info.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 10))
        tasks_info.setStyleSheet("color: #6b7280;")
        
        # È¢ÑËÆ°Êó∂Èó¥
        estimated_time = self.plan_data.get('estimated_total_time', 'Êú™Áü•')
        time_info = QLabel(f"‚è±Ô∏è {estimated_time}")
        time_info.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 10))
        time_info.setStyleSheet("color: #6b7280;")
        
        info_layout.addWidget(tasks_info)
        info_layout.addWidget(time_info)
        info_layout.addStretch()
        
        parent_layout.addLayout(info_layout)
        
    def create_progress_indicator(self, parent_layout):
        """ÂàõÂª∫ËøõÂ∫¶ÊåáÁ§∫Âô®"""
        progress_layout = QVBoxLayout()
        progress_layout.setSpacing(10)  # Â¢ûÂä†ËøõÂ∫¶Âå∫ÂüüÂÜÖÈÉ®Èó¥Ë∑ù
        
        # ËøõÂ∫¶ÊñáÊú¨
        current_task = self.plan_data.get('current_task', 0)
        total_tasks = self.plan_data.get('total_tasks', 1)
        progress_text = QLabel(f"ËøõÂ∫¶: {current_task}/{total_tasks}")
        progress_text.setFont(QFont("ÂæÆËΩØÈõÖÈªë", 9))
        progress_text.setStyleSheet("color: #6b7280;")
        
        # ËøõÂ∫¶Êù°
        progress_bar = QFrame()
        progress_bar.setFixedHeight(6)
        progress_value = (current_task / total_tasks * 100) if total_tasks > 0 else 0
        progress_bar.setStyleSheet(f"""
            QFrame {{
                background-color: #e5e7eb;
                border-radius: 3px;
            }}
        """)
        
        # Âú®ËøõÂ∫¶Êù°‰∏äÊ∑ªÂä†Â∑≤ÂÆåÊàêÈÉ®ÂàÜÁöÑÊ†∑Âºè
        if progress_value > 0:
            progress_inner = QFrame(progress_bar)
            progress_inner.setFixedHeight(6)
            progress_inner.setFixedWidth(int(progress_bar.width() * progress_value / 100))
            progress_inner.setStyleSheet(f"""
                QFrame {{
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                        stop:0 {self.theme_colors['accent']}, 
                        stop:1 {self.theme_colors['text']});
                    border-radius: 3px;
                }}
            """)
        
        progress_layout.addWidget(progress_text)
        progress_layout.addWidget(progress_bar)
        
        parent_layout.addLayout(progress_layout)
        
    def update_expand_indicator(self):
        """Êõ¥Êñ∞Â±ïÂºÄÊåáÁ§∫Âô®"""
        if hasattr(self, 'expand_indicator'):
            if self.is_expanded:
                self.expand_indicator.setText("‚ñº")
            else:
                self.expand_indicator.setText("‚ñ∂") 